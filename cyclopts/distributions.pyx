################################################
#                 WARNING!                     #
# This file has been auto-generated by xdress. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""
"""
cimport dtypes
cimport numpy as np
from libc.stdlib cimport free
from libcpp cimport bool as cpp_bool
from libcpp.vector cimport vector as cpp_vector

import numpy as np

np.import_array()



cdef class Sampler:
    """no docstring for {'tarbase': 'distributions', 'tarname': 'Sampler', 'language': 'c++', 'srcname': 'Sampler', 'sidecars': (), 'incfiles': ('cpp/distributions.h',), 'srcfiles': ('cpp/distributions.cc', 'cpp/distributions.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def __init__(self, ):
        """Sampler(self, )
        """
        self._inst = new cpp_distributions.Sampler()
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes

    # methods
    def SampleCommods(self, size, n_commods, commod_avg):
        """SampleCommods(self, size, n_commods, commod_avg)
        no docstring for SampleCommods, please file a bug report!"""
        cdef cpp_vector[int] rtnval
        cdef np.ndarray rtnval_proxy
        cdef np.npy_intp rtnval_proxy_shape[1]
        rtnval = (<cpp_distributions.Sampler *> self._inst).SampleCommods(<int> size, <int> n_commods, <int> commod_avg)
        rtnval_proxy_shape[0] = <np.npy_intp> rtnval.size()
        rtnval_proxy = np.PyArray_SimpleNewFromData(1, rtnval_proxy_shape, np.NPY_INT32, &rtnval[0])
        return rtnval_proxy
    
    
    def SampleLinear(self, prob):
        """SampleLinear(self, prob)
        no docstring for SampleLinear, please file a bug report!"""
        cdef cpp_bool rtnval
        rtnval = (<cpp_distributions.Sampler *> self._inst).SampleLinear(<double> prob)
        return bool(rtnval)
    
    
    def SampleNNodes(self, avg):
        """SampleNNodes(self, avg)
        no docstring for SampleNNodes, please file a bug report!"""
        cdef int rtnval
        rtnval = (<cpp_distributions.Sampler *> self._inst).SampleNNodes(<int> avg)
        return int(rtnval)
    
    
    def SampleReqAmt(self, ):
        """SampleReqAmt(self, )
        no docstring for SampleReqAmt, please file a bug report!"""
        cdef double rtnval
        rtnval = (<cpp_distributions.Sampler *> self._inst).SampleReqAmt()
        return float(rtnval)
    
    
    def SampleSubsetAvgSize(self, n, avg):
        """SampleSubsetAvgSize(self, n, avg)
        no docstring for SampleSubsetAvgSize, please file a bug report!"""
        cdef cpp_vector[int] rtnval
        cdef np.ndarray rtnval_proxy
        cdef np.npy_intp rtnval_proxy_shape[1]
        rtnval = (<cpp_distributions.Sampler *> self._inst).SampleSubsetAvgSize(<int> n, <int> avg)
        rtnval_proxy_shape[0] = <np.npy_intp> rtnval.size()
        rtnval_proxy = np.PyArray_SimpleNewFromData(1, rtnval_proxy_shape, np.NPY_INT32, &rtnval[0])
        return rtnval_proxy
    
    
    def SampleSubsetProb(self, n, prob):
        """SampleSubsetProb(self, n, prob)
        no docstring for SampleSubsetProb, please file a bug report!"""
        cdef cpp_vector[int] rtnval
        cdef np.ndarray rtnval_proxy
        cdef np.npy_intp rtnval_proxy_shape[1]
        rtnval = (<cpp_distributions.Sampler *> self._inst).SampleSubsetProb(<int> n, <double> prob)
        rtnval_proxy_shape[0] = <np.npy_intp> rtnval.size()
        rtnval_proxy = np.PyArray_SimpleNewFromData(1, rtnval_proxy_shape, np.NPY_INT32, &rtnval[0])
        return rtnval_proxy
    
    
    

    pass






{'cpppxd_footer': '', 'pyx_header': '', 'pxd_header': '', 'pxd_footer': '', 'cpppxd_header': '', 'pyx_footer': ''}
