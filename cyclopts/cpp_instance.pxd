################################################
#                 WARNING!                     #
# This file has been auto-generated by xdress. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################


from cyclopts cimport cpp_instance
from libcpp cimport bool as cpp_bool
from libcpp.map cimport map as cpp_map
from libcpp.string cimport string as std_string
from libcpp.vector cimport vector as cpp_vector

cdef extern from "instance.h" namespace "cyclopts":

    cdef cppclass ExSolver:
        # constructors
        ExSolver() except +
        ExSolver(std_string) except +

        # attributes
        std_string type

        # methods

        pass



cdef extern from "instance.h" namespace "cyclopts":

    cdef cppclass ExNode:
        # constructors
        ExNode() except +
        ExNode(int) except +
        ExNode(int, int) except +
        ExNode(int, int, cpp_bool) except +
        ExNode(int, int, cpp_bool, double) except +
        ExNode(int, int, cpp_bool, double, cpp_bool) except +
        ExNode(int, int, cpp_bool, double, cpp_bool, int) except +
        ExNode(const ExNode &) except +

        # attributes
        cpp_bool excl
        int excl_id
        int gid
        int id
        cpp_bool kind
        double qty

        # methods

        pass



cdef extern from "instance.h" namespace "cyclopts":

    cdef cppclass ExGroup:
        # constructors
        ExGroup() except +
        ExGroup(int) except +
        ExGroup(int, cpp_bool) except +
        ExGroup(int, cpp_bool, cpp_vector[double] &) except +
        ExGroup(int, cpp_bool, cpp_vector[double] &, double) except +
        ExGroup(const ExGroup &) except +

        # attributes
        cpp_vector[double] caps
        int id
        cpp_bool kind
        double qty

        # methods

        pass



cdef extern from "instance.h" namespace "cyclopts":

    cdef cppclass ExArc:
        # constructors
        ExArc() except +
        ExArc(int) except +
        ExArc(int, int) except +
        ExArc(int, int, cpp_vector[double] &) except +
        ExArc(int, int, cpp_vector[double] &, int) except +
        ExArc(int, int, cpp_vector[double] &, int, cpp_vector[double] &) except +
        ExArc(int, int, cpp_vector[double] &, int, cpp_vector[double] &, double) except +
        ExArc(const ExArc &) except +

        # attributes
        int id
        double pref
        cpp_vector[double] ucaps
        int uid
        cpp_vector[double] vcaps
        int vid

        # methods

        pass



cdef extern from "instance.h" namespace "cyclopts":

    cdef cppclass ProbSolution:
        # constructors
        ProbSolution() except +
        ProbSolution(double) except +
        ProbSolution(double, double) except +
        ProbSolution(double, double, std_string) except +
        ProbSolution(double, double, std_string, std_string) except +

        # attributes
        std_string cyclus_version
        double objective
        double time
        std_string type

        # methods

        pass



cdef extern from "instance.h" namespace "cyclopts":

    cdef cppclass ExSolution(ProbSolution):
        # constructors
        ExSolution() except +
        ExSolution(double) except +
        ExSolution(double, double) except +
        ExSolution(double, double, std_string) except +
        ExSolution(double, double, std_string, std_string) except +

        # attributes
        cpp_map[int, double] flows

        # methods

        pass





# function signatures
cdef extern from "instance.h" namespace "cyclopts":

    ExSolution Run() except +
    ExSolution Run(cpp_vector[ExGroup] &) except +
    ExSolution Run(cpp_vector[ExGroup] &, cpp_vector[ExNode] &) except +
    ExSolution Run(cpp_vector[ExGroup] &, cpp_vector[ExNode] &, cpp_vector[ExArc] &) except +
    ExSolution Run(cpp_vector[ExGroup] &, cpp_vector[ExNode] &, cpp_vector[ExArc] &, ExSolver &) except +
    ExSolution Run(cpp_vector[ExGroup] &, cpp_vector[ExNode] &, cpp_vector[ExArc] &, ExSolver &, cpp_bool) except +




{'cpppxd_footer': '', 'pyx_header': '', 'pxd_header': '', 'pxd_footer': '', 'cpppxd_header': '', 'pyx_footer': ''}