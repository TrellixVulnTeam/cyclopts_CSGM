###################
###  WARNING!!! ###
###################
# This file has been autogenerated

# Cython imports
from cython.operator cimport dereference as deref
from cython.operator cimport preincrement as inc
from libcpp.string cimport string as std_string
from libcpp.utility cimport pair
from libcpp.map cimport map as cpp_map
from libcpp.set cimport set as cpp_set
from libcpp.vector cimport vector as cpp_vector
from libcpp cimport bool as cpp_bool
from libc cimport stdio
from cpython.version cimport PY_MAJOR_VERSION
from cpython.ref cimport PyTypeObject, Py_INCREF, Py_XDECREF

# Python Imports
cimport numpy as np

# Local imports
cimport xdress_extra_types

cimport numpy as np


# Cython Imports For Types
from libcpp.map cimport map as cpp_map
from cyclopts cimport cpp_instance
from libcpp cimport bool as cpp_bool
from libcpp.vector cimport vector as cpp_vector
from cyclopts cimport cpp_execute

# int vector


# double vector


# cpp_execute.ArcFlow vector


# cpp_instance.ExGroup vector


# cpp_instance.ExNode vector


# cpp_instance.ExArc vector


# cpp_vector[int] vector


# MapIntDouble
cdef class _MapIterIntDouble(object):
    cdef cpp_map[int, double].iterator * iter_now
    cdef cpp_map[int, double].iterator * iter_end
    cdef void init(_MapIterIntDouble, cpp_map[int, double] *)

cdef class _MapIntDouble:
    cdef cpp_map[int, double] * map_ptr
    cdef public bint _free_map




# MapIntInt
cdef class _MapIterIntInt(object):
    cdef cpp_map[int, int].iterator * iter_now
    cdef cpp_map[int, int].iterator * iter_end
    cdef void init(_MapIterIntInt, cpp_map[int, int] *)

cdef class _MapIntInt:
    cdef cpp_map[int, int] * map_ptr
    cdef public bint _free_map




# MapIntBool
cdef class _MapIterIntBool(object):
    cdef cpp_map[int, cpp_bool].iterator * iter_now
    cdef cpp_map[int, cpp_bool].iterator * iter_end
    cdef void init(_MapIterIntBool, cpp_map[int, cpp_bool] *)

cdef class _MapIntBool:
    cdef cpp_map[int, cpp_bool] * map_ptr
    cdef public bint _free_map




# MapIntVectorInt
cdef class _MapIterIntVectorInt(object):
    cdef cpp_map[int, cpp_vector[int]].iterator * iter_now
    cdef cpp_map[int, cpp_vector[int]].iterator * iter_end
    cdef void init(_MapIterIntVectorInt, cpp_map[int, cpp_vector[int]] *)

cdef class _MapIntVectorInt:
    cdef cpp_map[int, cpp_vector[int]] * map_ptr
    cdef public bint _free_map




# MapIntVectorDouble
cdef class _MapIterIntVectorDouble(object):
    cdef cpp_map[int, cpp_vector[double]].iterator * iter_now
    cdef cpp_map[int, cpp_vector[double]].iterator * iter_end
    cdef void init(_MapIterIntVectorDouble, cpp_map[int, cpp_vector[double]] *)

cdef class _MapIntVectorDouble:
    cdef cpp_map[int, cpp_vector[double]] * map_ptr
    cdef public bint _free_map




# MapIntVectorVectorInt
cdef class _MapIterIntVectorVectorInt(object):
    cdef cpp_map[int, cpp_vector[cpp_vector[int]]].iterator * iter_now
    cdef cpp_map[int, cpp_vector[cpp_vector[int]]].iterator * iter_end
    cdef void init(_MapIterIntVectorVectorInt, cpp_map[int, cpp_vector[cpp_vector[int]]] *)

cdef class _MapIntVectorVectorInt:
    cdef cpp_map[int, cpp_vector[cpp_vector[int]]] * map_ptr
    cdef public bint _free_map




# MapIntMapIntVectorDouble
cdef class _MapIterIntMapIntVectorDouble(object):
    cdef cpp_map[int, cpp_map[int, cpp_vector[double]]].iterator * iter_now
    cdef cpp_map[int, cpp_map[int, cpp_vector[double]]].iterator * iter_end
    cdef void init(_MapIterIntMapIntVectorDouble, cpp_map[int, cpp_map[int, cpp_vector[double]]] *)

cdef class _MapIntMapIntVectorDouble:
    cdef cpp_map[int, cpp_map[int, cpp_vector[double]]] * map_ptr
    cdef public bint _free_map




# PairIntInt
cdef class _PairIntInt:
    cdef pair[int, int] * pair_ptr
    cdef public bint _free_pair


