################################################
#                 WARNING!                     #
# This file has been auto-generated by xdress. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""
"""
from libc.stdlib cimport free
from libcpp.string cimport string as std_string





cdef class Solver:
    """no docstring for {'tarbase': '_cproblem', 'tarname': 'Solver', 'language': 'c++', 'srcname': 'Solver', 'sidecars': (), 'incfiles': ('problem.h',), 'srcfiles': ('cpp/problem.cc', 'cpp/problem.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def __init__(self, type='cbc'):
        """Solver(self, type='cbc')
        """
        cdef char * type_proxy
        type_bytes = type.encode()
        self._inst = new cpp__cproblem.Solver(std_string(<char *> type_bytes))
    
    
    def __dealloc__(self):
        if self._free_inst and self._inst is not NULL:
            free(self._inst)

    # attributes
    property type:
        """no docstring for type, please file a bug report!"""
        def __get__(self):
            return bytes(<char *> (<cpp__cproblem.Solver *> self._inst).type.c_str()).decode()
    
        def __set__(self, value):
            cdef char * value_proxy
            value_bytes = value.encode()
            (<cpp__cproblem.Solver *> self._inst).type = std_string(<char *> value_bytes)
    
    
    # methods
    

    pass





cdef class ProbSolution:
    """no docstring for {'tarbase': '_cproblem', 'tarname': 'ProbSolution', 'language': 'c++', 'srcname': 'ProbSolution', 'sidecars': (), 'incfiles': ('problem.h',), 'srcfiles': ('cpp/problem.cc', 'cpp/problem.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def __init__(self, time=0, objective=0, type=''):
        """ProbSolution(self, time=0, objective=0, type='')
        """
        cdef char * type_proxy
        type_bytes = type.encode()
        self._inst = new cpp__cproblem.ProbSolution(<double> time, <double> objective, std_string(<char *> type_bytes))
    
    
    def __dealloc__(self):
        if self._free_inst and self._inst is not NULL:
            free(self._inst)

    # attributes
    property objective:
        """no docstring for objective, please file a bug report!"""
        def __get__(self):
            return float((<cpp__cproblem.ProbSolution *> self._inst).objective)
    
        def __set__(self, value):
            (<cpp__cproblem.ProbSolution *> self._inst).objective = <double> value
    
    
    property time:
        """no docstring for time, please file a bug report!"""
        def __get__(self):
            return float((<cpp__cproblem.ProbSolution *> self._inst).time)
    
        def __set__(self, value):
            (<cpp__cproblem.ProbSolution *> self._inst).time = <double> value
    
    
    property type:
        """no docstring for type, please file a bug report!"""
        def __get__(self):
            return bytes(<char *> (<cpp__cproblem.ProbSolution *> self._inst).type.c_str()).decode()
    
        def __set__(self, value):
            cdef char * value_proxy
            value_bytes = value.encode()
            (<cpp__cproblem.ProbSolution *> self._inst).type = std_string(<char *> value_bytes)
    
    
    # methods
    

    pass






{'cpppxd_footer': '', 'pyx_header': '', 'pxd_header': '', 'pxd_footer': '', 'cpppxd_header': '', 'pyx_footer': ''}
