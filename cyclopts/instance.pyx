################################################
#                 WARNING!                     #
# This file has been auto-generated by xdress. #
# Do not modify!!!                             #
#                                              #
#                                              #
#                    Come on, guys. I mean it! #
################################################
"""
"""
cimport cpp_instance
cimport dtypes
cimport numpy as np
from libc.stdlib cimport free
from libcpp cimport bool as cpp_bool
from libcpp.string cimport string as std_string
from libcpp.vector cimport vector as cpp_vector

import numpy as np

np.import_array()




cdef class ExNode:
    """no docstring for {'sidecars': (), 'tarbase': 'instance', 'tarname': 'ExNode', 'language': 'c++', 'srcname': 'ExNode', 'incfiles': ('instance.h',), 'srcfiles': ('cpp/instance.cc', 'cpp/instance.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def __init__(self, id, gid, kind, qty=0, excl=False, excl_id=0):
        """ExNode(self, id, gid, kind, qty=0, excl=False, excl_id=0)
        """
        self._inst = new cpp_instance.ExNode(<int> id, <int> gid, <bint> kind, <double> qty, <bint> excl, <int> excl_id)
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes
    property excl:
        """no docstring for excl, please file a bug report!"""
        def __get__(self):
            return bool((<cpp_instance.ExNode *> self._inst).excl)
    
        def __set__(self, value):
            (<cpp_instance.ExNode *> self._inst).excl = <bint> value
    
    
    property excl_id:
        """no docstring for excl_id, please file a bug report!"""
        def __get__(self):
            return int((<cpp_instance.ExNode *> self._inst).excl_id)
    
        def __set__(self, value):
            (<cpp_instance.ExNode *> self._inst).excl_id = <int> value
    
    
    property gid:
        """no docstring for gid, please file a bug report!"""
        def __get__(self):
            return int((<cpp_instance.ExNode *> self._inst).gid)
    
        def __set__(self, value):
            (<cpp_instance.ExNode *> self._inst).gid = <int> value
    
    
    property id:
        """no docstring for id, please file a bug report!"""
        def __get__(self):
            return int((<cpp_instance.ExNode *> self._inst).id)
    
        def __set__(self, value):
            (<cpp_instance.ExNode *> self._inst).id = <int> value
    
    
    property kind:
        """no docstring for kind, please file a bug report!"""
        def __get__(self):
            return bool((<cpp_instance.ExNode *> self._inst).kind)
    
        def __set__(self, value):
            (<cpp_instance.ExNode *> self._inst).kind = <bint> value
    
    
    property qty:
        """no docstring for qty, please file a bug report!"""
        def __get__(self):
            return float((<cpp_instance.ExNode *> self._inst).qty)
    
        def __set__(self, value):
            (<cpp_instance.ExNode *> self._inst).qty = <double> value
    
    
    # methods
    

    pass





cdef class ExSolution:
    """no docstring for {'sidecars': (), 'tarbase': 'instance', 'tarname': 'ExSolution', 'language': 'c++', 'srcname': 'ExSolution', 'incfiles': ('instance.h',), 'srcfiles': ('cpp/instance.cc', 'cpp/instance.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def __init__(self, time, cyclus_version):
        """ExSolution(self, time, cyclus_version)
        """
        cdef char * cyclus_version_proxy
        cyclus_version_bytes = cyclus_version.encode()
        self._inst = new cpp_instance.ExSolution(<double> time, std_string(<char *> cyclus_version_bytes))
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes
    property cyclus_version:
        """no docstring for cyclus_version, please file a bug report!"""
        def __get__(self):
            return bytes(<char *> (<cpp_instance.ExSolution *> self._inst).cyclus_version.c_str()).decode()
    
        def __set__(self, value):
            cdef char * value_proxy
            value_bytes = value.encode()
            (<cpp_instance.ExSolution *> self._inst).cyclus_version = std_string(<char *> value_bytes)
    
    
    property time:
        """no docstring for time, please file a bug report!"""
        def __get__(self):
            return float((<cpp_instance.ExSolution *> self._inst).time)
    
        def __set__(self, value):
            (<cpp_instance.ExSolution *> self._inst).time = <double> value
    
    
    # methods
    

    pass





cdef class ExGroup:
    """no docstring for {'sidecars': (), 'tarbase': 'instance', 'tarname': 'ExGroup', 'language': 'c++', 'srcname': 'ExGroup', 'incfiles': ('instance.h',), 'srcfiles': ('cpp/instance.cc', 'cpp/instance.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults
        self._caps = None

    def __init__(self, id, kind, ucaps, qty=0):
        """ExGroup(self, id, kind, ucaps, qty=0)
        """
        cdef cpp_vector[double] ucaps_proxy
        cdef int iucaps
        cdef int ucaps_size
        cdef double * ucaps_data
        # ucaps is a (('vector', 'float64', 0), '&')
        ucaps_size = len(ucaps)
        if isinstance(ucaps, np.ndarray) and (<np.ndarray> ucaps).descr.type_num == np.NPY_FLOAT64:
            ucaps_data = <double *> np.PyArray_DATA(<np.ndarray> ucaps)
            ucaps_proxy = cpp_vector[double](<size_t> ucaps_size)
            for iucaps in range(ucaps_size):
                ucaps_proxy[iucaps] = ucaps_data[iucaps]
        else:
            ucaps_proxy = cpp_vector[double](<size_t> ucaps_size)
            for iucaps in range(ucaps_size):
                ucaps_proxy[iucaps] = <double> ucaps[iucaps]
        self._inst = new cpp_instance.ExGroup(<int> id, <bint> kind, ucaps_proxy, <double> qty)
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes
    property caps:
        """no docstring for caps, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray caps_proxy
            cdef np.npy_intp caps_proxy_shape[1]
            if self._caps is None:
                caps_proxy_shape[0] = <np.npy_intp> (<cpp_instance.ExGroup *> self._inst).caps.size()
                caps_proxy = np.PyArray_SimpleNewFromData(1, caps_proxy_shape, np.NPY_FLOAT64, &(<cpp_instance.ExGroup *> self._inst).caps[0])
                self._caps = caps_proxy
            return self._caps
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int ivalue
            cdef int value_size
            cdef double * value_data
            # value is a ('vector', 'float64', 0)
            value_size = len(value)
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for ivalue in range(value_size):
                    value_proxy[ivalue] = value_data[ivalue]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for ivalue in range(value_size):
                    value_proxy[ivalue] = <double> value[ivalue]
            (<cpp_instance.ExGroup *> self._inst).caps = value_proxy
            self._caps = None
    
    
    property id:
        """no docstring for id, please file a bug report!"""
        def __get__(self):
            return int((<cpp_instance.ExGroup *> self._inst).id)
    
        def __set__(self, value):
            (<cpp_instance.ExGroup *> self._inst).id = <int> value
    
    
    property kind:
        """no docstring for kind, please file a bug report!"""
        def __get__(self):
            return bool((<cpp_instance.ExGroup *> self._inst).kind)
    
        def __set__(self, value):
            (<cpp_instance.ExGroup *> self._inst).kind = <bint> value
    
    
    property qty:
        """no docstring for qty, please file a bug report!"""
        def __get__(self):
            return float((<cpp_instance.ExGroup *> self._inst).qty)
    
        def __set__(self, value):
            (<cpp_instance.ExGroup *> self._inst).qty = <double> value
    
    
    # methods
    

    pass





cdef class ExSolver:
    """no docstring for {'sidecars': (), 'tarbase': 'instance', 'tarname': 'ExSolver', 'language': 'c++', 'srcname': 'ExSolver', 'incfiles': ('instance.h',), 'srcfiles': ('cpp/instance.cc', 'cpp/instance.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults


    def __init__(self, type='cbc'):
        """ExSolver(self, type='cbc')
        """
        cdef char * type_proxy
        type_bytes = type.encode()
        self._inst = new cpp_instance.ExSolver(std_string(<char *> type_bytes))
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes
    property type:
        """no docstring for type, please file a bug report!"""
        def __get__(self):
            return bytes(<char *> (<cpp_instance.ExSolver *> self._inst).type.c_str()).decode()
    
        def __set__(self, value):
            cdef char * value_proxy
            value_bytes = value.encode()
            (<cpp_instance.ExSolver *> self._inst).type = std_string(<char *> value_bytes)
    
    
    # methods
    

    pass





cdef class ExArc:
    """no docstring for {'sidecars': (), 'tarbase': 'instance', 'tarname': 'ExArc', 'language': 'c++', 'srcname': 'ExArc', 'incfiles': ('instance.h',), 'srcfiles': ('cpp/instance.cc', 'cpp/instance.h')}, please file a bug report!"""



    # constuctors
    def __cinit__(self, *args, **kwargs):
        self._inst = NULL
        self._free_inst = True

        # cached property defaults
        self._ucaps = None
        self._vcaps = None

    def __init__(self, uid, ucaps, vid, vcaps, pref):
        """ExArc(self, uid, ucaps, vid, vcaps, pref)
        """
        cdef cpp_vector[double] ucaps_proxy
        cdef int iucaps
        cdef int ucaps_size
        cdef double * ucaps_data
        cdef cpp_vector[double] vcaps_proxy
        cdef int ivcaps
        cdef int vcaps_size
        cdef double * vcaps_data
        # ucaps is a (('vector', 'float64', 0), '&')
        ucaps_size = len(ucaps)
        if isinstance(ucaps, np.ndarray) and (<np.ndarray> ucaps).descr.type_num == np.NPY_FLOAT64:
            ucaps_data = <double *> np.PyArray_DATA(<np.ndarray> ucaps)
            ucaps_proxy = cpp_vector[double](<size_t> ucaps_size)
            for iucaps in range(ucaps_size):
                ucaps_proxy[iucaps] = ucaps_data[iucaps]
        else:
            ucaps_proxy = cpp_vector[double](<size_t> ucaps_size)
            for iucaps in range(ucaps_size):
                ucaps_proxy[iucaps] = <double> ucaps[iucaps]
        # vcaps is a (('vector', 'float64', 0), '&')
        vcaps_size = len(vcaps)
        if isinstance(vcaps, np.ndarray) and (<np.ndarray> vcaps).descr.type_num == np.NPY_FLOAT64:
            vcaps_data = <double *> np.PyArray_DATA(<np.ndarray> vcaps)
            vcaps_proxy = cpp_vector[double](<size_t> vcaps_size)
            for ivcaps in range(vcaps_size):
                vcaps_proxy[ivcaps] = vcaps_data[ivcaps]
        else:
            vcaps_proxy = cpp_vector[double](<size_t> vcaps_size)
            for ivcaps in range(vcaps_size):
                vcaps_proxy[ivcaps] = <double> vcaps[ivcaps]
        self._inst = new cpp_instance.ExArc(<int> uid, ucaps_proxy, <int> vid, vcaps_proxy, <double> pref)
    
    
    def __dealloc__(self):
        if self._free_inst:
            free(self._inst)

    # attributes
    property flow:
        """no docstring for flow, please file a bug report!"""
        def __get__(self):
            return float((<cpp_instance.ExArc *> self._inst).flow)
    
        def __set__(self, value):
            (<cpp_instance.ExArc *> self._inst).flow = <double> value
    
    
    property pref:
        """no docstring for pref, please file a bug report!"""
        def __get__(self):
            return float((<cpp_instance.ExArc *> self._inst).pref)
    
        def __set__(self, value):
            (<cpp_instance.ExArc *> self._inst).pref = <double> value
    
    
    property ucaps:
        """no docstring for ucaps, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray ucaps_proxy
            cdef np.npy_intp ucaps_proxy_shape[1]
            if self._ucaps is None:
                ucaps_proxy_shape[0] = <np.npy_intp> (<cpp_instance.ExArc *> self._inst).ucaps.size()
                ucaps_proxy = np.PyArray_SimpleNewFromData(1, ucaps_proxy_shape, np.NPY_FLOAT64, &(<cpp_instance.ExArc *> self._inst).ucaps[0])
                self._ucaps = ucaps_proxy
            return self._ucaps
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int ivalue
            cdef int value_size
            cdef double * value_data
            # value is a ('vector', 'float64', 0)
            value_size = len(value)
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for ivalue in range(value_size):
                    value_proxy[ivalue] = value_data[ivalue]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for ivalue in range(value_size):
                    value_proxy[ivalue] = <double> value[ivalue]
            (<cpp_instance.ExArc *> self._inst).ucaps = value_proxy
            self._ucaps = None
    
    
    property uid:
        """no docstring for uid, please file a bug report!"""
        def __get__(self):
            return int((<cpp_instance.ExArc *> self._inst).uid)
    
        def __set__(self, value):
            (<cpp_instance.ExArc *> self._inst).uid = <int> value
    
    
    property vcaps:
        """no docstring for vcaps, please file a bug report!"""
        def __get__(self):
            cdef np.ndarray vcaps_proxy
            cdef np.npy_intp vcaps_proxy_shape[1]
            if self._vcaps is None:
                vcaps_proxy_shape[0] = <np.npy_intp> (<cpp_instance.ExArc *> self._inst).vcaps.size()
                vcaps_proxy = np.PyArray_SimpleNewFromData(1, vcaps_proxy_shape, np.NPY_FLOAT64, &(<cpp_instance.ExArc *> self._inst).vcaps[0])
                self._vcaps = vcaps_proxy
            return self._vcaps
    
        def __set__(self, value):
            cdef cpp_vector[double] value_proxy
            cdef int ivalue
            cdef int value_size
            cdef double * value_data
            # value is a ('vector', 'float64', 0)
            value_size = len(value)
            if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == np.NPY_FLOAT64:
                value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
                value_proxy = cpp_vector[double](<size_t> value_size)
                for ivalue in range(value_size):
                    value_proxy[ivalue] = value_data[ivalue]
            else:
                value_proxy = cpp_vector[double](<size_t> value_size)
                for ivalue in range(value_size):
                    value_proxy[ivalue] = <double> value[ivalue]
            (<cpp_instance.ExArc *> self._inst).vcaps = value_proxy
            self._vcaps = None
    
    
    property vid:
        """no docstring for vid, please file a bug report!"""
        def __get__(self):
            return int((<cpp_instance.ExArc *> self._inst).vid)
    
        def __set__(self, value):
            (<cpp_instance.ExArc *> self._inst).vid = <int> value
    
    
    # methods
    

    pass






{'cpppxd_footer': '', 'pyx_header': '', 'pxd_header': '', 'pxd_footer': '', 'cpppxd_header': '', 'pyx_footer': ''}
